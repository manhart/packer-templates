# -*- mode: ruby -*-
# vi: set ft=ruby :

# Load required libs/gems
require 'json'

# Config parameters
VM_NAME = 'dev.local' unless defined?(VM_NAME)
VM_IP = '192.168.56.11' unless defined?(VM_IP)
VM_SSH_PORT = '22022' unless defined?(VM_SSH_PORT)
VM_CLEAR_VHOSTS = true unless defined?(VM_CLEAR_VHOSTS)
VM_VHOSTS = nil unless defined?(VM_VHOSTS)
VM_VHOSTS_FILE = '/vagrant/vhosts.json' unless defined?(VM_VHOSTS_FILE)
VHOSTS_JSON_FILE = '' # Set this path according to your project


# Extract Hostname from VM_NAME
HOSTNAME = VM_NAME.split('.')[0]

# VHosts-Definition
default_vhost_config = [
  {
    "server_name": "#{HOSTNAME}.local",
    "document_root": "/virtualweb",
    "enable_http": true,
    "enable_https": true,
    "include_optional": true,
    "env_vars": {
      "_RelativeRoot": "../",
      "_Stage": "develop",
      "_SQL_Host": "localhost",
      "_DefaultSessionDuration": "14400"
    }
  }
]

VHOSTS_JSON = if VM_VHOSTS
  # convert VM_VHOSTS Hash into JSON
  VM_VHOSTS.to_json
else
  # If no VM_VHOSTS defined, we read the configuration from file, otherwise we use the fallback default_vhost_config
  if File.exists?(VHOSTS_JSON_FILE)
    File.read(VHOSTS_JSON_FILE)
  else
    default_vhost_config.to_json
  end
end

Vagrant.configure("2") do |config|
    config.vm.box_check_update = true
    config.vm.hostname = VM_NAME
	config.ssh.forward_agent = true

	# Shared / synced folders
	# @see @see https://www.speich.net/articles/en/2018/12/24/virtualbox-6-how-to-enable-symlinks-in-a-linux-guest-os/
	# @see https://superuser.com/questions/124679/how-do-i-create-a-link-in-windows-7-home-premium-as-a-regular-user#125981
    config.vm.synced_folder "./src", "/srv/www", create: true, group: "www-data", mount_options: ['dmode=775,fmode=664'], SharedFoldersEnableSymlinksCreate: true
	# alternate: config.vm.synced_folder "./src", "srv/www", type: "rsync"

	# Host-Only 2. Adapter
    config.vm.network 'private_network', ip: VM_IP
    # config.vm.network "public_network", auto_config: false
	# config.vm.network "public_network", ip: "192.168.178.79", bridge: "Intel(R) I211 Gigabit Network Connection"
	
	
	# Hyper-V can block the default vagrant ssh port 2222, we switch to 22022
	# check with PS: netsh interface ipv4 show excludedportrange protocol=tcp
	config.vm.usable_port_range = (22022..22135)
	config.vm.network :forwarded_port, guest: 22, host: 2222, disabled: true
	config.vm.network :forwarded_port, guest: 22, host: VM_SSH_PORT, id: 'ssh', auto_correct: true
	
	# VirtualBox Provider
	config.vm.provider 'virtualbox' do |vb|
		vb.gui = false
		vb.name = VM_NAME
	end
	
    # check gitconfig and write defaults
    git_config_path = File.expand_path("~/.gitconfig")
    print "Checking #{git_config_path} ...\n"
	if !File.exists?(git_config_path)
		print "Your #{git_config_path} is missing.\n\nPlease insert your credentials\n"
		print "Firstname and Lastname: "
		name = STDIN.gets.chomp
		print "E-Mail: "
		email = STDIN.gets.chomp
		File.write(git_config_path, "[user]
    name = #{name}
    email = #{email}

[core]
    autocrlf = false
    ignorecase = false
")
		print "#{git_config_path} created\n"
		print "\n"
	end
	config.vm.provision "file", source: git_config_path, destination: "~/.gitconfig"


    # Provisioning: Copy public key file to vm and register for vagrant user
	if ARGV.include?('up') || ARGV.include?('provision') || ARGV.include?('reload')
        # List of possible SSH public key paths on the host machine
        ssh_key_paths = [
          "#{Dir.home}/.ssh/id_dsa.pub",
          "#{Dir.home}/.ssh/id_ecdsa.pub",
          "#{Dir.home}/.ssh/id_ed25519.pub",
          "#{Dir.home}/.ssh/id_rsa.pub"
        ]

        ssh_key_paths.each do |key_path|
          if File.exists?(key_path)
            puts "User public Key found: #{key_path}. If not already present, the key is added to the VM in the ~/.ssh/authorized_keys file."
            ssh_pub_key = File.readlines(key_path).first.strip
            config.vm.provision 'shell', inline: <<-SHELL, privileged: false
              grep -q -F "#{ssh_pub_key}" ~/.ssh/authorized_keys 2>/dev/null || echo "#{ssh_pub_key}" >> ~/.ssh/authorized_keys
            SHELL
          end
        end
    end
	
    config.vm.provision "shell", args: [VM_NAME, VM_IP, HOSTNAME, VM_VHOSTS_FILE, VHOSTS_JSON, VM_CLEAR_VHOSTS.to_s], inline: <<-SHELL
		export DEBIAN_FRONTEND=noninteractive
		whoami
        ssh-add -l
		echo "IP-Addresses:"
        ip addr show | grep inet

        echo "Provisioning via shell $1. Modify /etc/hosts to this host $3"
        sed -i 's#lamp#'$3'#g' /etc/hosts

        # MariaDB shell login with root and no password (@todo: maybe revise with random password)
        mysqladmin --user=root password ""
        systemctl restart mariadb.service

        echo "Update apt packages"
        apt-get update -yqq
        ACCEPT_EULA=Y apt-get upgrade -yqqf

        echo "Update composer"
        COMPOSER_ALLOW_SUPERUSER=1 composer self-update
		
		VAGRANT_XDEBUG_OUTPUT=/vagrant/xdebug
		if [[ ! -d $VAGRANT_XDEBUG_OUTPUT ]]
		then
			mkdir -p $VAGRANT_XDEBUG_OUTPUT
			chown vagrant $VAGRANT_XDEBUG_OUTPUT
		fi

        VAGRANT_SHARE_SSL=/vagrant/ssl
		VHOST_FILE="$4"
		VHOSTS_JSON="$5"
		CLEAR_VHOSTS="$6"

		#  Check if VHOSTS_JSON is not empty
        if [ -n "$VHOSTS_JSON" ]; then
          # If VHOSTS_JSON has content, write it to the VHOST_FILE
          echo "$VHOSTS_JSON" > "$VHOST_FILE"
        else
          if [ ! -f "$VHOST_FILE" ]; then
			cat <<EOF > "$VHOST_FILE"
{
  "vhosts": [
    {
      "server_name": "$1.local",
      "document_root": "/virtualweb",
      "enable_http": true,
      "enable_https": true,
      "include_optional": true,
      "env_vars": {
        "_RelativeRoot": "../",
        "_Stage": "develop",
        "_SQL_Host": "localhost",
		"_DefaultSessionDuration": "14400"
      }
    }
  ]
}
EOF
		  fi
		fi

		if [ "$CLEAR_VHOSTS" = true ] ; then
			setup_vhosts --delete-all-vhosts
		else
		    setup_vhosts
		fi

		echo "Create readme.txt to import SSL-Certificate in Chrome"
		cat > $VAGRANT_SHARE_SSL/readme.txt <<EOF
-= Import Key in Google Chrome =-

- Enter URL: chrome://settings/security
- Click on "Zertifikate verwalten" (HTTPS/SSL-Zertifikate und -Einstellungen verwalten)
- Click on button "Importieren..."
- Choose the file rootCA.crt from your box ./ssl directory
- Continue
Attention (VERY IMPORTANT): in the next window press "Durchsuchen" and choose "VertrauenswÃ¼rdige Stammzertifizierungsstellen"
- Continue, confirm and finish
- Restart browser
EOF
SHELL
	
	config.vm.define "virtualbox" do |virtualbox|
		config.vm.provision "shell", inline: "echo Hello Developers! Your hostname is #{VM_NAME}"
	end
end